from enum import Enum
from os import environ

from loguru import logger
from openai import OpenAIError
from vk_api import VkApi, ApiError
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id

from src.dialogue_tracker import DialogueTracker

_VK_API_TOKEN = "VK_API_TOKEN"
_VK_USERS_PREFIX = "vk_"


class Commands(Enum):
    help = "–ü–æ–º–æ—â—å"
    reset = "–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
    role = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å"
    reset_role = "–°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é"


_HELP_MESSAGE = """{all_commands}

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {tokens_in_history}/{messages_in_history},
–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∏—Å—Ç–æ—Ä–∏–∏: {max_alive_dialogue} —Å–µ–∫—É–Ω–¥.
–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: '{role}'
–ï—Å–ª–∏ –±–æ—Ç –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, OpenAI API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞, —Ç–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º, —Å–±—Ä–æ—Å—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @spirin.egor
"""


def handle_message(message: str, user_id: str, dialogue_tracker: DialogueTracker) -> str:
    if message.startswith("/"):
        command, *argument = message[1:].split(maxsplit=1)
        try:
            command = Commands[command]
        except KeyError:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /help"

        if command == Commands.help:
            all_commands = [f" - /{it.name} -- {it.value}" for it in Commands]
            help_msg = _HELP_MESSAGE.format(
                all_commands="\n".join(all_commands), role=dialogue_tracker.get_role(user_id), **dialogue_tracker.state
            )
            return help_msg
        elif command == Commands.reset:
            dialogue_tracker.reset_history(user_id)
            return "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞"
        elif command == Commands.role:
            if not argument:
                return "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–ª—å: /role <role>"
            dialogue_tracker.set_role(user_id, argument[0])
            return "–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞"
        elif command == Commands.reset_role:
            dialogue_tracker.reset_role(user_id)
            return "–†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é, –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞"

    try:
        return dialogue_tracker.on_message(message, user_id)
    except OpenAIError as e:
        logger.warning(f"OpenAI API error: {e}")
        return f"Error from API: {e.user_message}\nTry to repeat you request later or contact admin ü§ó"


def main():
    logger.info(f"Starting VK bot")
    token = environ.get(_VK_API_TOKEN)
    vk_session = VkApi(token=token)
    vk_api = vk_session.get_api()
    vk_longpoll = VkLongPoll(vk_session)

    dialogue_tracker = DialogueTracker()

    logger.info("Start listening server")
    while True:
        try:
            for event in vk_longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                    response = handle_message(event.text, _VK_USERS_PREFIX + str(event.user_id), dialogue_tracker)
                    vk_api.messages.send(user_id=event.user_id, message=response, random_id=get_random_id())
        except KeyboardInterrupt:
            logger.info(f"Keyboard interrupt received, stop listening server")
            exit()
        except ApiError:
            logger.info(f"Strange API error occurred, ignore it")
        except Exception as e:
            logger.error(e)


if __name__ == "__main__":
    main()
